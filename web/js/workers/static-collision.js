(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/*  static collision detection worker */

var distance2d = function distance2d(a, b) {
	return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2));
},
    distance2dCompare = function distance2dCompare(a, b, n) {
	// more efficient version of distance2d()
	return Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2) < n * n;
},
    distance3dCompare = function distance3dCompare(a, b, n) {
	// ..faster than using Math.sqrt()
	return Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) + Math.pow(a[2] - b[2], 2) < n * n;
};

var observer = {
	position: [0, 0, 0],
	prevPos: [0, 0, 0],
	velocity: [0, 0, 0],
	vrHeight: 0
},
    voxelList = [],
    voxels = [];

self.update = function () {

	var distance = 0,
	    position = observer.position,
	    innerBox = [false, false],
	    velocity = observer.velocity,
	    vrHeight = observer.vrHeight,
	    closeToVenue = false,
	    collision = false,
	    yPos = 0,
	    voxel = null,
	    ent = null,
	    entRadius = 10,
	    structure = null,
	    bounds = [0, 0],
	    voxel = null,
	    delta = [0, 0],
	    oPos = [],
	    speed = 0,
	    e = 0,
	    i = 0,
	    v = 0;

	for (i = 0; i < voxelList.length; i++) {
		voxel = voxelList[i];

		if (!!!voxel || !!!voxel.position) continue;

		if (!!voxel && distance2dCompare(position, voxel.position, 180)) {
			// do collisions on voxels & structures... just walls at first..		
			if (voxel.loaded == undefined) {
				voxel.loaded = true;
				self.postMessage('{"command": "load entities", "data":{"coords":"' + voxel.cell[0] + '.' + voxel.cell[1] + '.' + voxel.cell[2] + '"}}');
			}

			if (distance2dCompare(position, voxel.position, 60)) {

				var alt = voxel.altitude || 0;

				yPos = voxel.position[1];

				if (distance2dCompare(position, voxel.position, 24.5)) {
					if (position[1] > yPos - 21 + vrHeight && position[1] < 14.25 + yPos + (vrHeight != 0 ? vrHeight - 1 : 0)) {
						collision = true;
						self.postMessage('{"command": "platform collision", "data":{"type":"top", "position":[' + voxel.position[0] + ',' + yPos + ',' + voxel.position[2] + '] }}');
					}
				}
				if (!!voxel.entities && voxel.entities.length > 0) {
					e = voxel.entities.length - 1;

					while (e >= 0) {
						ent = voxel.entities[e];
						entRadius = ent.boundingRadius;

						if (!!!ent || !!!ent.components) {
							console.warn("Problem with entity! ", e, ent);continue;
						}
						if (distance3dCompare(position, [ent.position[0] - entRadius, ent.position[1], ent.position[2] - entRadius], (entRadius * 1.6 || 3) + 2.5)) {
							ent.components.map(function (entComp) {
								var boundingRadius = entComp.boundingRadius * 1.2 || Math.max(entComp.props.geometry.size[0], entComp.props.geometry.size[2]) * 1.4;
								if (distance2dCompare(position, [ent.position[0] + entComp.position[0], 0, ent.position[2] + entComp.position[2]], boundingRadius * 1.5)) {
									if (!!entComp.props.floor) {
										var verticalOffset = position[1] + 2 - (entComp.position[1] + ent.position[1]);
										if (verticalOffset > 0 && verticalOffset < 5) {
											self.postMessage(JSON.stringify({ command: "floor collision", data: {
													position: entComp.position,
													floorData: entComp.props.floor
												} }));
											collision = true;
										}
									} else if (distance3dCompare(position, [ent.position[0] + entComp.position[0], ent.position[1] + entComp.position[1], ent.position[2] + entComp.position[2]], boundingRadius)) {
										collision = true;
										self.postMessage(JSON.stringify({ command: "entity-user collision", data: { position: entComp.position } }));
									}
								}
							});
						}
						e -= 1;
					}
				}
			}
		}
	}

	if (!collision) observer.prevPos = [observer.position[0], observer.position[1], observer.position[2]];

	self.postMessage('{"command": "update"}');
	self.updateLoop = setTimeout(function () {
		self.update();
	}, 15);
};

self.onmessage = function (event) {

	var message = JSON.parse(event.data),
	    data = message.data,
	    user = observer,
	    voxel = null,
	    toRemove = null,
	    items = [],
	    entities = [],
	    c = 0,
	    p = 0;

	if (message.command == "update") {
		// user.prevPos = [user.position[0], user.position[1], user.position[2]];
		user.position = data.position;
		user.velocity = data.velocity;
		user.vrHeight = data.vrHeight;
		//self.postMessage(JSON.stringify(self.observer));
	} else if (message.command == "add voxels") {

		voxelList = voxelList.concat(data);
		data.map(function (v) {
			voxels[v.cell.join(".")] = v;
		});
	} else if (message.command == "remove voxels") {

		p = data.length - 1;

		while (p >= 0) {

			toRemove = data[p];
			c = voxelList.length - 1;

			while (c >= 0) {

				voxel = voxelList[c];
				if (voxel != null && voxel.cell[0] == toRemove.cell[0] && voxel.cell[1] == toRemove.cell[1] && voxel.cell[2] == toRemove.cell[2]) {
					voxelList.splice(c, 1);
					voxels[voxel.cell.join(".")] = null;
				}
				c--;
			}
			p--;
		}
	} else if (message.command == "add entity") {

		if (!!!voxels[data.coords.join(".")]) voxels[data.coords.join(".")] = { entities: [], cell: data.coords };

		entities = voxels[data.coords.join(".")].entities;
		entities.push(data.entity);
	} else if (message.command == "remove entity") {

		entities = voxels[data.coords.join(".")].entities;

		if (entities != null) {

			c = entities.length - 1;
			while (c >= 0) {
				if (entities[c].id == data.entityId) {
					voxels[data.coords.join(".")].entities.splice(c, 1);
					c = -1;
				}
				c--;
			}
		}
	} else if (message.command == "update entity") {

		entities = voxels[data.coords.join(".")].entities;

		if (entities != null) {
			c = entities.length - 1;

			while (c >= 0) {
				if (entities[c].id == data.entityId) {
					entities[c] = data.entity;
					c = -1;
				}
				c--;
			}
		}
	} else if (message.command == "clear") {

		voxels = [];
		voxelList = [];
	} else if (message.command == "start") {

		self.update();
	} else if (message.command == "stop") {

		self.stop();
	} else if (message.command == "log") {
		if (data == "") {
			self.postMessage('{"command":"log","data":[' + user.position[0] + ',' + user.position[1] + ',' + user.position[2] + ']}');
			self.postMessage('{"command":"log","data":' + JSON.stringify(voxels) + '}');
		}
	}
};

self.stop = function () {
	clearTimeout(self.updateLoop);
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXHdvcmtlcnNcXHN0YXRpYy1jb2xsaXNpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTs7QUFFQSxJQUFJLGFBQWEsU0FBYixVQUFhLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBWTtBQUN6QixRQUFPLEtBQUssSUFBTCxDQUFXLEtBQUssR0FBTCxDQUFXLEVBQUUsQ0FBRixJQUFLLEVBQUUsQ0FBRixDQUFoQixFQUF1QixDQUF2QixJQUE2QixLQUFLLEdBQUwsQ0FBVyxFQUFFLENBQUYsSUFBSyxFQUFFLENBQUYsQ0FBaEIsRUFBdUIsQ0FBdkIsQ0FBeEMsQ0FBUDtBQUNELENBRkg7QUFBQSxJQUdFLG9CQUFvQixTQUFwQixpQkFBb0IsQ0FBRSxDQUFGLEVBQUssQ0FBTCxFQUFRLENBQVIsRUFBZTtBQUFFO0FBQ3BDLFFBQU8sS0FBSyxHQUFMLENBQVcsRUFBRSxDQUFGLElBQUssRUFBRSxDQUFGLENBQWhCLEVBQXVCLENBQXZCLElBQTZCLEtBQUssR0FBTCxDQUFXLEVBQUUsQ0FBRixJQUFLLEVBQUUsQ0FBRixDQUFoQixFQUF1QixDQUF2QixDQUE3QixHQUEyRCxJQUFFLENBQXBFO0FBQ0EsQ0FMSDtBQUFBLElBTUUsb0JBQW9CLFNBQXBCLGlCQUFvQixDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixFQUFlO0FBQUU7QUFDcEMsUUFBUSxLQUFLLEdBQUwsQ0FBVyxFQUFFLENBQUYsSUFBSyxFQUFFLENBQUYsQ0FBaEIsRUFBdUIsQ0FBdkIsSUFBNkIsS0FBSyxHQUFMLENBQVcsRUFBRSxDQUFGLElBQUssRUFBRSxDQUFGLENBQWhCLEVBQXVCLENBQXZCLENBQTdCLEdBQTBELEtBQUssR0FBTCxDQUFXLEVBQUUsQ0FBRixJQUFLLEVBQUUsQ0FBRixDQUFoQixFQUF1QixDQUF2QixDQUEzRCxHQUEyRixJQUFFLENBQXBHO0FBQ0EsQ0FSSDs7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Qiw2QkFBNkIsS0FBSyxTQUFMLENBQWUsTUFBZixDQUE3QixHQUFxRCxHQUF0RTtBQUNBO0FBQ0Q7QUFDRCxDQXpHRDs7QUEyR0EsS0FBSyxJQUFMLEdBQVksWUFBTTtBQUNqQixjQUFjLEtBQUssVUFBbkI7QUFDQSxDQUZEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qICBzdGF0aWMgY29sbGlzaW9uIGRldGVjdGlvbiB3b3JrZXIgKi9cblxubGV0IGRpc3RhbmNlMmQgPSAoIGEsIGIgKSA9PiB7XG4gICAgcmV0dXJuIE1hdGguc3FydCggTWF0aC5wb3coIChhWzBdLWJbMF0pLCAyICkgKyBNYXRoLnBvdyggKGFbMl0tYlsyXSksIDIgKSApXG4gIH0sXG4gIGRpc3RhbmNlMmRDb21wYXJlID0gKCBhLCBiLCBuICkgPT4geyAvLyBtb3JlIGVmZmljaWVudCB2ZXJzaW9uIG9mIGRpc3RhbmNlMmQoKVxuXHQgIHJldHVybiBNYXRoLnBvdyggKGFbMF0tYlswXSksIDIgKSArIE1hdGgucG93KCAoYVsyXS1iWzJdKSwgMiApIDwgKG4qbilcbiAgfSxcbiAgZGlzdGFuY2UzZENvbXBhcmUgPSAoIGEsIGIsIG4gKSA9PiB7IC8vIC4uZmFzdGVyIHRoYW4gdXNpbmcgTWF0aC5zcXJ0KClcblx0ICByZXR1cm4gKE1hdGgucG93KCAoYVswXS1iWzBdKSwgMiApICsgTWF0aC5wb3coIChhWzFdLWJbMV0pLCAyICkgKyBNYXRoLnBvdyggKGFbMl0tYlsyXSksIDIgKSApIDwgKG4qbilcbiAgfVxuXG5sZXQgb2JzZXJ2ZXIgPSB7XG5cdFx0cG9zaXRpb246IFswLCAwLCAwXSxcblx0XHRwcmV2UG9zOiBbMCwgMCwgMF0sXG5cdFx0dmVsb2NpdHk6IFswLCAwLCAwXSxcblx0XHR2ckhlaWdodDogMFxuXHR9LFxuXHR2b3hlbExpc3QgPSBbXSxcblx0dm94ZWxzID0gW11cblxuc2VsZi51cGRhdGUgPSAoICkgPT4ge1xuXG5cdHZhciBkaXN0YW5jZSA9IDAsXG5cdFx0cG9zaXRpb24gXHQgPSBvYnNlcnZlci5wb3NpdGlvbixcblx0XHRpbm5lckJveCBcdCA9IFtmYWxzZSwgZmFsc2VdLFxuXHRcdHZlbG9jaXR5IFx0ID0gb2JzZXJ2ZXIudmVsb2NpdHksXG5cdFx0dnJIZWlnaHQgXHQgPSBvYnNlcnZlci52ckhlaWdodCxcblx0XHRjbG9zZVRvVmVudWUgPSBmYWxzZSxcblx0XHRjb2xsaXNpb24gXHQgPSBmYWxzZSxcblx0XHR5UG9zIFx0XHQgPSAwLFxuXHRcdHZveGVsIFx0XHQgPSBudWxsLFxuXHRcdGVudCBcdFx0ID0gbnVsbCxcblx0XHRlbnRSYWRpdXMgICAgPSAxMCxcblx0XHRzdHJ1Y3R1cmUgXHQgPSBudWxsLFxuXHRcdGJvdW5kcyBcdFx0ID0gWzAsIDBdLFxuXHRcdHZveGVsIFx0XHQgPSBudWxsLFxuXHRcdGRlbHRhIFx0XHQgPSBbMCwgMF0sXG5cdFx0b1BvcyBcdFx0ID0gW10sXG5cdFx0c3BlZWQgXHRcdCA9IDAsXG5cdFx0ZSBcdFx0XHQgPSAwLFxuXHRcdGkgXHRcdFx0ID0gMCxcblx0XHR2IFx0XHRcdCA9IDBcblxuXHRmb3IgKCBpID0gMDsgaSA8IHZveGVsTGlzdC5sZW5ndGg7IGkgKysgKSB7XG5cdFx0dm94ZWwgPSB2b3hlbExpc3RbIGkgXVxuXG5cdFx0aWYgKCAhISF2b3hlbCB8fCAhISF2b3hlbC5wb3NpdGlvbikgY29udGludWVcblxuXHRcdGlmICggISF2b3hlbCAmJiBkaXN0YW5jZTJkQ29tcGFyZSggcG9zaXRpb24sIHZveGVsLnBvc2l0aW9uLCAxODAgKSApIHsgXHQvLyBkbyBjb2xsaXNpb25zIG9uIHZveGVscyAmIHN0cnVjdHVyZXMuLi4ganVzdCB3YWxscyBhdCBmaXJzdC4uXHRcdFxuXHRcdFx0aWYgKCB2b3hlbC5sb2FkZWQgPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR2b3hlbC5sb2FkZWQgPSB0cnVlXG5cdFx0XHRcdHNlbGYucG9zdE1lc3NhZ2UoJ3tcImNvbW1hbmRcIjogXCJsb2FkIGVudGl0aWVzXCIsIFwiZGF0YVwiOntcImNvb3Jkc1wiOlwiJyt2b3hlbC5jZWxsWzBdKycuJyt2b3hlbC5jZWxsWzFdKycuJyt2b3hlbC5jZWxsWzJdKydcIn19Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGlzdGFuY2UyZENvbXBhcmUoIHBvc2l0aW9uLCB2b3hlbC5wb3NpdGlvbiwgNjAgKSApIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0bGV0IGFsdCA9IHZveGVsLmFsdGl0dWRlIHx8IDBcblx0XHRcdFx0XG5cdFx0XHRcdHlQb3MgPSB2b3hlbC5wb3NpdGlvblsxXVxuXHRcdFx0XHRcblx0XHRcdFx0aWYgKCBkaXN0YW5jZTJkQ29tcGFyZSggcG9zaXRpb24sIHZveGVsLnBvc2l0aW9uLCAyNC41ICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBwb3NpdGlvblsxXSA+IHlQb3MgLSAyMSArIHZySGVpZ2h0ICAmJiBwb3NpdGlvblsxXSA8IDE0LjI1K3lQb3MgKyAodnJIZWlnaHQgIT0gMCA/IHZySGVpZ2h0LTEgOiAwKSApIHtcblx0XHRcdFx0XHRcdGNvbGxpc2lvbiA9IHRydWVcblx0XHRcdFx0XHRcdHNlbGYucG9zdE1lc3NhZ2UoJ3tcImNvbW1hbmRcIjogXCJwbGF0Zm9ybSBjb2xsaXNpb25cIiwgXCJkYXRhXCI6e1widHlwZVwiOlwidG9wXCIsIFwicG9zaXRpb25cIjpbJyArIHZveGVsLnBvc2l0aW9uWzBdICsgJywnICsgeVBvcyArICcsJyArIHZveGVsLnBvc2l0aW9uWzJdICsgJ10gfX0nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cdFxuXHRcdFx0XHRpZiAoICEhdm94ZWwuZW50aXRpZXMgJiYgdm94ZWwuZW50aXRpZXMubGVuZ3RoID4gMCApIHtcblx0XHRcdFx0XHRlID0gdm94ZWwuZW50aXRpZXMubGVuZ3RoIC0gMVxuXG5cdFx0XHRcdFx0d2hpbGUgKCBlID49IDAgKSB7XG5cdFx0XHRcdFx0XHRlbnQgPSB2b3hlbC5lbnRpdGllc1sgZSBdXG5cdFx0XHRcdFx0XHRlbnRSYWRpdXMgPSBlbnQuYm91bmRpbmdSYWRpdXMgXG5cblx0XHRcdFx0XHRcdGlmICggISEhIGVudCB8fCAhISFlbnQuY29tcG9uZW50cyApIHsgY29uc29sZS53YXJuKFwiUHJvYmxlbSB3aXRoIGVudGl0eSEgXCIsZSAsZW50KTsgY29udGludWUgfVxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0YW5jZTNkQ29tcGFyZSggcG9zaXRpb24sIFtlbnQucG9zaXRpb25bMF0tZW50UmFkaXVzLCBlbnQucG9zaXRpb25bMV0sIGVudC5wb3NpdGlvblsyXS1lbnRSYWRpdXNdLCAoZW50UmFkaXVzKjEuNnx8MykrMi41KSApIHsgXG5cdFx0XHRcdFx0XHRcdGVudC5jb21wb25lbnRzLm1hcCggZW50Q29tcCA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGJvdW5kaW5nUmFkaXVzID0gZW50Q29tcC5ib3VuZGluZ1JhZGl1cyoxLjIgfHwgTWF0aC5tYXgoZW50Q29tcC5wcm9wcy5nZW9tZXRyeS5zaXplWzBdLCBlbnRDb21wLnByb3BzLmdlb21ldHJ5LnNpemVbMl0pKjEuNFxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UyZENvbXBhcmUoIFxuXHRcdFx0XHRcdFx0XHRcdFx0cG9zaXRpb24sIFxuXHRcdFx0XHRcdFx0XHRcdFx0WyBlbnQucG9zaXRpb25bMF0gKyBlbnRDb21wLnBvc2l0aW9uWzBdLCAwLCBlbnQucG9zaXRpb25bMl0gKyBlbnRDb21wLnBvc2l0aW9uWzJdXSxcblx0XHRcdFx0XHRcdFx0XHRcdGJvdW5kaW5nUmFkaXVzICogMS41XG5cdFx0XHRcdFx0XHRcdFx0KSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAhISBlbnRDb21wLnByb3BzLmZsb29yICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRsZXQgdmVydGljYWxPZmZzZXQgPSAocG9zaXRpb25bMV0gKyAyIC0gKGVudENvbXAucG9zaXRpb25bMV0rZW50LnBvc2l0aW9uWzFdKSkgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdmVydGljYWxPZmZzZXQgPiAwICYmIHZlcnRpY2FsT2Zmc2V0IDwgNSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnBvc3RNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSgge2NvbW1hbmQ6IFwiZmxvb3IgY29sbGlzaW9uXCIsIGRhdGE6IHsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogZW50Q29tcC5wb3NpdGlvbiwgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmbG9vckRhdGE6IGVudENvbXAucHJvcHMuZmxvb3Jcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y29sbGlzaW9uID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBkaXN0YW5jZTNkQ29tcGFyZSggXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uLCBcblx0XHRcdFx0XHRcdFx0XHRcdFx0WyBlbnQucG9zaXRpb25bMF0gKyBlbnRDb21wLnBvc2l0aW9uWzBdLCBlbnQucG9zaXRpb25bMV0gKyBlbnRDb21wLnBvc2l0aW9uWzFdLCBlbnQucG9zaXRpb25bMl0gKyBlbnRDb21wLnBvc2l0aW9uWzJdXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ym91bmRpbmdSYWRpdXNcblx0XHRcdFx0XHRcdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29sbGlzaW9uID0gdHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnBvc3RNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSgge2NvbW1hbmQ6IFwiZW50aXR5LXVzZXIgY29sbGlzaW9uXCIsIGRhdGE6eyBwb3NpdGlvbjogZW50Q29tcC5wb3NpdGlvbiB9fSApIClcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlIC09IDFcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cdFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggIWNvbGxpc2lvbiApXG5cblx0XHRvYnNlcnZlci5wcmV2UG9zID0gWyBvYnNlcnZlci5wb3NpdGlvblswXSwgb2JzZXJ2ZXIucG9zaXRpb25bMV0sIG9ic2VydmVyLnBvc2l0aW9uWzJdIF1cblx0XG5cblx0c2VsZi5wb3N0TWVzc2FnZSgne1wiY29tbWFuZFwiOiBcInVwZGF0ZVwifScpXG5cdHNlbGYudXBkYXRlTG9vcCA9IHNldFRpbWVvdXQoICgpID0+IHtcblx0XHRzZWxmLnVwZGF0ZSgpXG5cdH0sIDE1KVxuXG59XG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKCBldmVudCApIHsgXG5cblx0dmFyIG1lc3NhZ2UgID0gSlNPTi5wYXJzZSggZXZlbnQuZGF0YSApLFxuXHRcdGRhdGEgXHQgPSBtZXNzYWdlLmRhdGEsXG5cdFx0dXNlciBcdCA9IG9ic2VydmVyLFxuXHRcdHZveGVsIFx0ID0gbnVsbCxcblx0XHR0b1JlbW92ZSA9IG51bGwsXG5cdFx0aXRlbXMgXHQgPSBbXSxcblx0XHRlbnRpdGllcyA9IFtdLFxuXHRcdGMgXHRcdCA9IDAsXG5cdFx0cCBcdFx0ID0gMFxuXHRcdFxuXHRpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcInVwZGF0ZVwiICkge1xuXHRcdC8vIHVzZXIucHJldlBvcyA9IFt1c2VyLnBvc2l0aW9uWzBdLCB1c2VyLnBvc2l0aW9uWzFdLCB1c2VyLnBvc2l0aW9uWzJdXTtcblx0XHR1c2VyLnBvc2l0aW9uID0gZGF0YS5wb3NpdGlvblxuXHRcdHVzZXIudmVsb2NpdHkgPSBkYXRhLnZlbG9jaXR5XG5cdFx0dXNlci52ckhlaWdodCA9IGRhdGEudnJIZWlnaHRcblx0XHQvL3NlbGYucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5vYnNlcnZlcikpO1xuXHR9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJhZGQgdm94ZWxzXCIgKSB7XG5cblx0XHR2b3hlbExpc3QgPSB2b3hlbExpc3QuY29uY2F0KGRhdGEpXG5cdFx0ZGF0YS5tYXAoIHYgPT4ge1xuXHRcdFx0dm94ZWxzWyB2LmNlbGwuam9pbihcIi5cIikgXSA9IHZcblx0XHR9KVxuXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcInJlbW92ZSB2b3hlbHNcIiApIHtcblxuXHRcdHAgPSBkYXRhLmxlbmd0aCAtMVxuXG5cdFx0d2hpbGUgKCBwID49IDAgKSB7XG5cblx0XHRcdHRvUmVtb3ZlID0gZGF0YVtwXVxuXHRcdFx0YyA9IHZveGVsTGlzdC5sZW5ndGgtMVxuXG5cdFx0XHR3aGlsZSAoIGMgPj0gMCApIHtcblxuXHRcdFx0XHR2b3hlbCA9IHZveGVsTGlzdFsgYyBdXG5cdFx0XHRcdGlmICggdm94ZWwgIT0gbnVsbCAmJiB2b3hlbC5jZWxsWzBdID09IHRvUmVtb3ZlLmNlbGxbMF0gJiYgdm94ZWwuY2VsbFsxXSA9PSB0b1JlbW92ZS5jZWxsWzFdICAmJiB2b3hlbC5jZWxsWzJdID09IHRvUmVtb3ZlLmNlbGxbMl0gKSB7XHRcblx0XHRcdFx0XHR2b3hlbExpc3Quc3BsaWNlKCBjLCAxIClcblx0XHRcdFx0XHR2b3hlbHNbIHZveGVsLmNlbGwuam9pbihcIi5cIildID0gbnVsbFxuXHRcdFx0XHR9XG5cdFx0XHRcdGMtLVxuXHRcdFx0fVxuXHRcdFx0cCAtLVxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJhZGQgZW50aXR5XCIgKSB7XG5cblx0XHRpZiAoISEhIHZveGVsc1tkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKV0pXG5cdFx0XHR2b3hlbHNbZGF0YS5jb29yZHMuam9pbihcIi5cIildID0geyBlbnRpdGllczogW10sIGNlbGw6IGRhdGEuY29vcmRzIH1cblxuICAgIFx0ZW50aXRpZXMgPSB2b3hlbHNbZGF0YS5jb29yZHMuam9pbihcIi5cIildLmVudGl0aWVzXG4gICAgXHRlbnRpdGllcy5wdXNoKCBkYXRhLmVudGl0eSApXG5cbiAgfSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwicmVtb3ZlIGVudGl0eVwiICkge1xuXG4gICAgXHRlbnRpdGllcyA9IHZveGVsc1sgZGF0YS5jb29yZHMuam9pbihcIi5cIikgXS5lbnRpdGllc1xuXG5cdFx0aWYgKCBlbnRpdGllcyAhPSBudWxsICkge1xuXG5cdFx0XHRjID0gZW50aXRpZXMubGVuZ3RoLTFcblx0XHRcdHdoaWxlICggYyA+PSAwICkge1xuXHRcdFx0XHRpZiAoIGVudGl0aWVzW2NdLmlkID09IGRhdGEuZW50aXR5SWQgKSB7XG5cdFx0XHRcdFx0dm94ZWxzWyBkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKSBdLmVudGl0aWVzLnNwbGljZShjLCAxKVxuXHRcdFx0XHRcdGMgPSAtMVxuXHRcdFx0XHR9XG5cdFx0XHRcdGMtLVxuXHRcdFx0fVxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJ1cGRhdGUgZW50aXR5XCIgKSB7XG5cblx0XHRlbnRpdGllcyA9IHZveGVsc1sgZGF0YS5jb29yZHMuam9pbihcIi5cIikgXS5lbnRpdGllc1xuXG5cdFx0aWYgKCBlbnRpdGllcyAhPSBudWxsICkge1xuXHRcdFx0YyA9IGVudGl0aWVzLmxlbmd0aC0xXG5cblx0XHRcdHdoaWxlICggYyA+PSAwICkge1xuXHRcdFx0XHRpZiAoZW50aXRpZXNbIGMgXS5pZCA9PSBkYXRhLmVudGl0eUlkKSB7XG5cdFx0XHRcdFx0ZW50aXRpZXNbIGMgXSA9IGRhdGEuZW50aXR5XG5cdFx0XHRcdFx0YyA9IC0xXG5cdFx0XHRcdH1cblx0XHRcdFx0Yy0tXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcImNsZWFyXCIgKSB7XG5cblx0XHR2b3hlbHMgPSBbXVxuXHRcdHZveGVsTGlzdCA9IFtdXG5cblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwic3RhcnRcIiApIHtcblxuXHRcdHNlbGYudXBkYXRlKClcblxuXHR9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJzdG9wXCIgKSB7XG5cblx0XHRzZWxmLnN0b3AoKVxuXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcImxvZ1wiICkge1xuXHRcdGlmIChkYXRhID09IFwiXCIpIHtcblx0XHRcdHNlbGYucG9zdE1lc3NhZ2UoJ3tcImNvbW1hbmRcIjpcImxvZ1wiLFwiZGF0YVwiOlsnICsgdXNlci5wb3NpdGlvblswXSArICcsJyArIHVzZXIucG9zaXRpb25bMV0gKyAnLCcgKyB1c2VyLnBvc2l0aW9uWzJdICsgJ119Jyk7XG5cdFx0XHRzZWxmLnBvc3RNZXNzYWdlKCd7XCJjb21tYW5kXCI6XCJsb2dcIixcImRhdGFcIjonICsgSlNPTi5zdHJpbmdpZnkodm94ZWxzKSsgJ30nKTtcblx0XHR9XG5cdH1cbn07XG5cbnNlbGYuc3RvcCA9ICgpID0+IHtcblx0Y2xlYXJUaW1lb3V0KCBzZWxmLnVwZGF0ZUxvb3AgKVxufVxuIl19
