(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*  static collision detection worker */

'use strict';

var distance2d = function distance2d(a, b) {

	return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2));
},
    distance2dCompare = function distance2dCompare(a, b, n) {
	// more efficient version of distance2d()

	return Math.pow(a[0] - b[0], 2) + Math.pow(a[2] - b[2], 2) < n * n;
},
    distance3dCompare = function distance3dCompare(a, b, n) {
	// ..faster than using Math.sqrt()

	return Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2) + Math.pow(a[2] - b[2], 2) < n * n;
};

var observer = {
	position: [0, 0, 0],
	prevPos: [0, 0, 0],
	velocity: [0, 0, 0],
	vrHeight: 0
},
    voxelList = [],
    voxels = [];

self.update = function () {

	var distance = 0,
	    position = observer.position,
	    innerBox = [false, false],
	    velocity = observer.velocity,
	    vrHeight = observer.vrHeight,
	    closeToVenue = false,
	    collision = false,
	    cKey = "",
	    yPos = 0,
	    size = 50000,
	    voxel = null,
	    ent = null,
	    structure = null,
	    bounds = [0, 0],
	    voxel = null,
	    delta = [0, 0],
	    oPos = [],
	    speed = 0,
	    e = 0,
	    i = 0,
	    v = 0;

	for (i = 0; i < voxelList.length; i++) {

		voxel = voxelList[i];

		if (!!!voxel || !!!voxel.position) continue;

		if (!!voxel && distance2dCompare(position, voxel.position, 2500000)) {
			// do collisions on voxels & structures... just walls at first..

			if (voxel.loaded == undefined) {

				voxel.loaded = true;
				self.postMessage('{"command": "load entities", "data":{"coords":"' + voxel.cell[0] + '.' + voxel.cell[1] + '.' + voxel.cell[2] + '"}}');
			}

			if (distance2dCompare(position, voxel.position, 900000)) {

				var alt = voxel.altitude || 0;

				yPos = voxel.position[1];

				if (distance2dCompare(position, voxel.position, 528000)) {

					if (position[1] > yPos - 400000 + vrHeight && position[1] < yPos + 450000 + vrHeight) {

						collision = true;
						self.postMessage('{"command": "platform collision", "data":{"type":"top", "position":[' + voxel.position[0] + ',' + yPos + ',' + voxel.position[2] + '] }}');
					}

					if (!!voxel.entities && voxel.entities.length > 0) {

						e = voxel.entities.length - 1;

						while (e >= 0) {

							ent = voxel.entities[e];

							if (!!!ent || !!!ent.components) {
								console.warn("Problem with entity! ", e, ent);continue;
							}

							if (distance3dCompare(position, ent.position, (ent.boundingRadius || 100000) + 10000)) {

								ent.components.map(function (entComp) {

									if (distance3dCompare(position, entComp.position, entComp.boundingRadius || 28000)) {

										collision = true;

										if (!!entComp.props.floor) {

											self.postMessage(JSON.stringify({ command: "floor collision", data: {
													position: entComp.position,
													floorData: entComp.props.floor
												} }));
										} else {

											self.postMessage(JSON.stringify({ command: "entity-user collision", data: { position: entComp.position } }));
										}
									}
								});
							}

							e -= 1;
						}
					}
				}
			}
		}
	}

	if (!collision) observer.prevPos = [observer.position[0], observer.position[1], observer.position[2]];

	self.postMessage('{"command": "update"}');
	self.updateLoop = setTimeout(function () {
		self.update();
	}, 15);
};

self.onmessage = function (event) {

	var message = JSON.parse(event.data),
	    data = message.data,
	    user = observer,
	    voxel = null,
	    toRemove = null,
	    items = [],
	    entities = [],
	    c = 0,
	    p = 0;

	if (message.command == "update") {
		// user.prevPos = [user.position[0], user.position[1], user.position[2]];
		user.position = data.position;
		user.velocity = data.velocity;
		user.vrHeight = data.vrHeight;
		//self.postMessage(JSON.stringify(self.observer));
	} else if (message.command == "add voxels") {

			voxelList = voxelList.concat(data);

			data.map(function (v) {
				voxels[v.cell.join(".")] = v;
			});
		} else if (message.command == "remove voxels") {

			p = data.length - 1;

			while (p >= 0) {

				toRemove = data[p];
				c = voxelList.length - 1;

				while (c >= 0) {

					voxel = voxelList[c];

					if (voxel != null && voxel.cell[0] == toRemove.cell[0] && voxel.cell[1] == toRemove.cell[1] && voxel.cell[2] == toRemove.cell[2]) {

						voxelList.splice(c, 1);
						voxels[voxel.cell.join(".")] = null;
					}

					c--;
				}

				p--;
			}
		} else if (message.command == "add entity") {

			if (!!!voxels[data.coords.join(".")]) voxels[data.coords.join(".")] = { entities: [], cell: data.coords };

			entities = voxels[data.coords.join(".")].entities;

			entities.push(data.entity);
		} else if (message.command == "remove entity") {

			entities = voxels[data.coords.join(".")].entities;

			if (entities != null) {

				c = entities.length - 1;

				while (c >= 0) {

					if (entities[c].id == data.entityId) {

						voxels[data.coords.join(".")].entities.splice(c, 1);
						c = -1;
					}

					c--;
				}
			}
		} else if (message.command == "update entity") {

			entities = voxels[data.coords.join(".")].entities;

			if (entities != null) {

				c = entities.length - 1;

				while (c >= 0) {

					if (entities[c].id == data.entityId) {

						entities[c] = data.entity;
						c = -1;
					}

					c--;
				}
			}
		} else if (message.command == "clear") {

			voxels = [];
		} else if (message.command == "start") {

			self.update();
		} else if (message.command == "stop") {

			self.stop();
		} else if (message.command == "log") {

			if (data == "") {
				self.postMessage('{"command":"log","data":[' + user.position[0] + ',' + user.position[1] + ',' + user.position[2] + ']}');
				self.postMessage('{"command":"log","data":' + JSON.stringify(voxels) + '}');
			}
		}
};

self.stop = function () {

	clearTimeout(self.updateLoop);
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOi9Db2RlL3NyYy9naXRodWIuY29tL2NvbnZvbHZyL2NvbnZvbHZyL2NsaWVudC9zcmMvanMvd29ya2Vycy9zdGF0aWMtY29sbGlzaW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUNFQSxJQUFJLFVBQVUsR0FBRyxTQUFiLFVBQVUsQ0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFNOztBQUV6QixRQUFPLElBQUksQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFHLENBQUMsQ0FBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRyxDQUFDLENBQUUsQ0FBRSxDQUFBO0NBRTVFO0lBQ0QsaUJBQWlCLEdBQUcsU0FBcEIsaUJBQWlCLENBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQU07OztBQUVsQyxRQUFPLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRyxDQUFDLENBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxDQUFFLEdBQUksQ0FBQyxHQUFDLENBQUMsQUFBQyxDQUFBO0NBRXRFO0lBQ0QsaUJBQWlCLEdBQUcsU0FBcEIsaUJBQWlCLENBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQU07OztBQUVsQyxRQUFPLEFBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFHLENBQUMsQ0FBRSxHQUFHLElB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Rzs7QUFFeEMsU0FBTSxHQUFHLEVBQUUsQ0FBQTtHQUVYLE1BQU0sSUFBSyxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sRUFBRzs7QUFFeEMsT0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO0dBRWIsTUFBTSxJQUFLLE9BQU8sQ0FBQyxPQUFPLElBQUksTUFBTSxFQUFHOztBQUV2QyxPQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7R0FFWCxNQUFNLElBQUssT0FBTyxDQUFDLE9BQU8sSUFBSSxLQUFLLEVBQUc7O0FBRXRDLE9BQUksSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUNmLFFBQUksQ0FBQyxXQUFXLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMxSCxRQUFJLENBQUMsV0FBVyxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7SUFDM0U7R0FFRDtDQUNELENBQUM7O0FBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxZQUFNOztBQUVqQixhQUFZLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFBO0NBRS9CLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyogIHN0YXRpYyBjb2xsaXNpb24gZGV0ZWN0aW9uIHdvcmtlciAqL1xyXG5cclxubGV0IGRpc3RhbmNlMmQgPSAoIGEsIGIgKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIE1hdGguc3FydCggTWF0aC5wb3coIChhWzBdLWJbMF0pLCAyICkgKyBNYXRoLnBvdyggKGFbMl0tYlsyXSksIDIgKSApXHJcblxyXG4gIH0sXHJcbiAgZGlzdGFuY2UyZENvbXBhcmUgPSAoIGEsIGIsIG4gKSA9PiB7IC8vIG1vcmUgZWZmaWNpZW50IHZlcnNpb24gb2YgZGlzdGFuY2UyZCgpXHJcblxyXG5cdCAgcmV0dXJuIE1hdGgucG93KCAoYVswXS1iWzBdKSwgMiApICsgTWF0aC5wb3coIChhWzJdLWJbMl0pLCAyICkgPCAobipuKVxyXG5cclxuICB9LFxyXG4gIGRpc3RhbmNlM2RDb21wYXJlID0gKCBhLCBiLCBuICkgPT4geyAvLyAuLmZhc3RlciB0aGFuIHVzaW5nIE1hdGguc3FydCgpXHJcblxyXG5cdCAgcmV0dXJuIChNYXRoLnBvdyggKGFbMF0tYlswXSksIDIgKSArIE1hdGgucG93KCAoYVsxXS1iWzFdKSwgMiApICsgTWF0aC5wb3coIChhWzJdLWJbMl0pLCAyICkgKSA8IChuKm4pXHJcblxyXG4gIH1cclxuXHJcbmxldCBvYnNlcnZlciA9IHtcclxuXHRcdHBvc2l0aW9uOiBbMCwgMCwgMF0sXHJcblx0XHRwcmV2UG9zOiBbMCwgMCwgMF0sXHJcblx0XHR2ZWxvY2l0eTogWzAsIDAsIDBdLFxyXG5cdFx0dnJIZWlnaHQ6IDBcclxuXHR9LFxyXG5cdHZveGVsTGlzdCA9IFtdLFxyXG5cdHZveGVscyA9IFtdXHJcblxyXG5zZWxmLnVwZGF0ZSA9ICggKSA9PiB7XHJcblxyXG5cdHZhciBkaXN0YW5jZSA9IDAsXHJcblx0XHRwb3NpdGlvbiBcdCA9IG9ic2VydmVyLnBvc2l0aW9uLFxyXG5cdFx0aW5uZXJCb3ggXHQgPSBbZmFsc2UsIGZhbHNlXSxcclxuXHRcdHZlbG9jaXR5IFx0ID0gb2JzZXJ2ZXIudmVsb2NpdHksXHJcblx0XHR2ckhlaWdodCBcdCA9IG9ic2VydmVyLnZySGVpZ2h0LFxyXG5cdFx0Y2xvc2VUb1ZlbnVlID0gIGZhbHNlLFxyXG5cdFx0Y29sbGlzaW9uIFx0ID0gZmFsc2UsXHJcblx0XHRjS2V5IFx0XHQgPSBcIlwiLFxyXG5cdFx0eVBvcyBcdFx0ID0gMCxcclxuXHRcdHNpemUgXHRcdCA9IDUwMDAwLFxyXG5cdFx0dm94ZWwgXHRcdCA9IG51bGwsXHJcblx0XHRlbnQgXHRcdCA9IG51bGwsXHJcblx0XHRzdHJ1Y3R1cmUgXHQgPSBudWxsLFxyXG5cdFx0Ym91bmRzIFx0XHQgPSBbMCwgMF0sXHJcblx0XHR2b3hlbCBcdFx0ID0gbnVsbCxcclxuXHRcdGRlbHRhIFx0XHQgPSBbMCwgMF0sXHJcblx0XHRvUG9zIFx0XHQgPSBbXSxcclxuXHRcdHNwZWVkIFx0XHQgPSAwLFxyXG5cdFx0ZSBcdFx0XHQgPSAwLFxyXG5cdFx0aSBcdFx0XHQgPSAwLFxyXG5cdFx0diBcdFx0XHQgPSAwXHJcblxyXG5cdGZvciAoIGkgPSAwOyBpIDwgdm94ZWxMaXN0Lmxlbmd0aDsgaSArKyApIHtcclxuXHJcblx0XHR2b3hlbCA9IHZveGVsTGlzdFsgaSBdXHJcblxyXG5cdFx0aWYgKCAhISF2b3hlbCB8fCAhISF2b3hlbC5wb3NpdGlvbikgY29udGludWVcclxuXHJcblx0XHRpZiAoICEhdm94ZWwgJiYgZGlzdGFuY2UyZENvbXBhcmUoIHBvc2l0aW9uLCB2b3hlbC5wb3NpdGlvbiwgMjUwMDAwMCApICkgeyBcdC8vIGRvIGNvbGxpc2lvbnMgb24gdm94ZWxzICYgc3RydWN0dXJlcy4uLiBqdXN0IHdhbGxzIGF0IGZpcnN0Li5cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRpZiAoIHZveGVsLmxvYWRlZCA9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dm94ZWwubG9hZGVkID0gdHJ1ZVxyXG5cdFx0XHRcdHNlbGYucG9zdE1lc3NhZ2UoJ3tcImNvbW1hbmRcIjogXCJsb2FkIGVudGl0aWVzXCIsIFwiZGF0YVwiOntcImNvb3Jkc1wiOlwiJyt2b3hlbC5jZWxsWzBdKycuJyt2b3hlbC5jZWxsWzFdKycuJyt2b3hlbC5jZWxsWzJdKydcIn19Jyk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGRpc3RhbmNlMmRDb21wYXJlKCBwb3NpdGlvbiwgdm94ZWwucG9zaXRpb24sIDkwMDAwMCApICkge1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IGFsdCA9IHZveGVsLmFsdGl0dWRlIHx8IDBcclxuXHRcdFx0XHRcclxuXHRcdFx0XHR5UG9zID0gdm94ZWwucG9zaXRpb25bMV1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlMmRDb21wYXJlKCBwb3NpdGlvbiwgdm94ZWwucG9zaXRpb24sIDUyODAwMCApICkge1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmICggcG9zaXRpb25bMV0gPiB5UG9zIC0gNDAwMDAwICsgdnJIZWlnaHQgICYmIHBvc2l0aW9uWzFdIDwgeVBvcyArIDQ1MDAwMCArIHZySGVpZ2h0ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29sbGlzaW9uID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzZWxmLnBvc3RNZXNzYWdlKCd7XCJjb21tYW5kXCI6IFwicGxhdGZvcm0gY29sbGlzaW9uXCIsIFwiZGF0YVwiOntcInR5cGVcIjpcInRvcFwiLCBcInBvc2l0aW9uXCI6WycgKyB2b3hlbC5wb3NpdGlvblswXSArICcsJyArIHlQb3MgKyAnLCcgKyB2b3hlbC5wb3NpdGlvblsyXSArICddIH19Jyk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoICEhdm94ZWwuZW50aXRpZXMgJiYgdm94ZWwuZW50aXRpZXMubGVuZ3RoID4gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdGUgPSB2b3hlbC5lbnRpdGllcy5sZW5ndGggLSAxXHJcblxyXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGUgPj0gMCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0ZW50ID0gdm94ZWwuZW50aXRpZXNbIGUgXVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoICEhISBlbnQgfHwgISEhZW50LmNvbXBvbmVudHMgKSB7IGNvbnNvbGUud2FybihcIlByb2JsZW0gd2l0aCBlbnRpdHkhIFwiLGUgLGVudCk7IGNvbnRpbnVlIH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBkaXN0YW5jZTNkQ29tcGFyZSggcG9zaXRpb24sIGVudC5wb3NpdGlvbiwgKGVudC5ib3VuZGluZ1JhZGl1c3x8MTAwMDAwKSsxMDAwMCkgKSB7IFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGVudC5jb21wb25lbnRzLm1hcCggZW50Q29tcCA9PiB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlM2RDb21wYXJlKCBwb3NpdGlvbiwgZW50Q29tcC5wb3NpdGlvbiwgZW50Q29tcC5ib3VuZGluZ1JhZGl1cyB8fCAyODAwMCkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbGxpc2lvbiA9IHRydWVcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAhISBlbnRDb21wLnByb3BzLmZsb29yICkgeyBcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnBvc3RNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSgge2NvbW1hbmQ6IFwiZmxvb3IgY29sbGlzaW9uXCIsIGRhdGE6IHsgXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiBlbnRDb21wLnBvc2l0aW9uLCBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Zmxvb3JEYXRhOiBlbnRDb21wLnByb3BzLmZsb29yXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9fSkpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2VsZi5wb3N0TWVzc2FnZSggSlNPTi5zdHJpbmdpZnkoIHtjb21tYW5kOiBcImVudGl0eS11c2VyIGNvbGxpc2lvblwiLCBkYXRhOnsgcG9zaXRpb246IGVudENvbXAucG9zaXRpb24gfX0gKSApXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGUgLT0gMVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCAhY29sbGlzaW9uIClcclxuXHJcblx0XHRvYnNlcnZlci5wcmV2UG9zID0gWyBvYnNlcnZlci5wb3NpdGlvblswXSwgb2JzZXJ2ZXIucG9zaXRpb25bMV0sIG9ic2VydmVyLnBvc2l0aW9uWzJdIF1cclxuXHRcclxuXHJcblx0c2VsZi5wb3N0TWVzc2FnZSgne1wiY29tbWFuZFwiOiBcInVwZGF0ZVwifScpXHJcblx0c2VsZi51cGRhdGVMb29wID0gc2V0VGltZW91dCggKCkgPT4ge1xyXG5cdFx0c2VsZi51cGRhdGUoKVxyXG5cdH0sIDE1KVxyXG5cclxufVxyXG5cclxuc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoIGV2ZW50ICkgeyBcclxuXHJcblx0dmFyIG1lc3NhZ2UgID0gSlNPTi5wYXJzZSggZXZlbnQuZGF0YSApLFxyXG5cdFx0ZGF0YSBcdCA9IG1lc3NhZ2UuZGF0YSxcclxuXHRcdHVzZXIgXHQgPSBvYnNlcnZlcixcclxuXHRcdHZveGVsIFx0ID0gbnVsbCxcclxuXHRcdHRvUmVtb3ZlID0gbnVsbCxcclxuXHRcdGl0ZW1zIFx0ID0gW10sXHJcblx0XHRlbnRpdGllcyA9IFtdLFxyXG5cdFx0YyBcdFx0ID0gMCxcclxuXHRcdHAgXHRcdCA9IDBcclxuXHRcdFxyXG5cdGlmICggbWVzc2FnZS5jb21tYW5kID09IFwidXBkYXRlXCIgKSB7XHJcblx0XHQvLyB1c2VyLnByZXZQb3MgPSBbdXNlci5wb3NpdGlvblswXSwgdXNlci5wb3NpdGlvblsxXSwgdXNlci5wb3NpdGlvblsyXV07XHJcblx0XHR1c2VyLnBvc2l0aW9uID0gZGF0YS5wb3NpdGlvblxyXG5cdFx0dXNlci52ZWxvY2l0eSA9IGRhdGEudmVsb2NpdHlcclxuXHRcdHVzZXIudnJIZWlnaHQgPSBkYXRhLnZySGVpZ2h0XHJcblx0XHQvL3NlbGYucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5vYnNlcnZlcikpO1xyXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcImFkZCB2b3hlbHNcIiApIHtcclxuXHJcblx0XHR2b3hlbExpc3QgPSB2b3hlbExpc3QuY29uY2F0KGRhdGEpXHJcblxyXG5cdFx0ZGF0YS5tYXAoIHYgPT4ge1xyXG5cdFx0XHR2b3hlbHNbIHYuY2VsbC5qb2luKFwiLlwiKSBdID0gdlxyXG5cdFx0fSlcclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwicmVtb3ZlIHZveGVsc1wiICkge1xyXG5cclxuXHRcdHAgPSBkYXRhLmxlbmd0aCAtMVxyXG5cclxuXHRcdHdoaWxlICggcCA+PSAwICkge1xyXG5cclxuXHRcdFx0dG9SZW1vdmUgPSBkYXRhW3BdXHJcblx0XHRcdGMgPSB2b3hlbExpc3QubGVuZ3RoLTFcclxuXHJcblx0XHRcdHdoaWxlICggYyA+PSAwICkge1xyXG5cclxuXHRcdFx0XHR2b3hlbCA9IHZveGVsTGlzdFsgYyBdXHJcblxyXG5cdFx0XHRcdGlmICggdm94ZWwgIT0gbnVsbCAmJiB2b3hlbC5jZWxsWzBdID09IHRvUmVtb3ZlLmNlbGxbMF0gJiYgdm94ZWwuY2VsbFsxXSA9PSB0b1JlbW92ZS5jZWxsWzFdICAmJiB2b3hlbC5jZWxsWzJdID09IHRvUmVtb3ZlLmNlbGxbMl0gKSB7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHZveGVsTGlzdC5zcGxpY2UoIGMsIDEgKVxyXG5cdFx0XHRcdFx0dm94ZWxzWyB2b3hlbC5jZWxsLmpvaW4oXCIuXCIpXSA9IG51bGxcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGMtLVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cCAtLVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwiYWRkIGVudGl0eVwiICkge1xyXG5cclxuXHRcdGlmICghISEgdm94ZWxzW2RhdGEuY29vcmRzLmpvaW4oXCIuXCIpXSlcclxuXHJcblx0XHRcdHZveGVsc1tkYXRhLmNvb3Jkcy5qb2luKFwiLlwiKV0gPSB7IGVudGl0aWVzOiBbXSwgY2VsbDogZGF0YS5jb29yZHMgfVxyXG5cclxuXHJcbiAgICBcdGVudGl0aWVzID0gdm94ZWxzW2RhdGEuY29vcmRzLmpvaW4oXCIuXCIpXS5lbnRpdGllc1xyXG5cclxuICAgIFx0ZW50aXRpZXMucHVzaCggZGF0YS5lbnRpdHkgKVxyXG5cclxuICB9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJyZW1vdmUgZW50aXR5XCIgKSB7XHJcblxyXG4gICAgXHRlbnRpdGllcyA9IHZveGVsc1sgZGF0YS5jb29yZHMuam9pbihcIi5cIikgXS5lbnRpdGllc1xyXG5cclxuXHRcdGlmICggZW50aXRpZXMgIT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGMgPSBlbnRpdGllcy5sZW5ndGgtMVxyXG5cclxuXHRcdFx0d2hpbGUgKCBjID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdGlmICggZW50aXRpZXNbY10uaWQgPT0gZGF0YS5lbnRpdHlJZCApIHtcclxuXHJcblx0XHRcdFx0XHR2b3hlbHNbIGRhdGEuY29vcmRzLmpvaW4oXCIuXCIpIF0uZW50aXRpZXMuc3BsaWNlKGMsIDEpXHJcblx0XHRcdFx0XHRjID0gLTFcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjLS1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcInVwZGF0ZSBlbnRpdHlcIiApIHtcclxuXHJcblx0XHRlbnRpdGllcyA9IHZveGVsc1sgZGF0YS5jb29yZHMuam9pbihcIi5cIikgXS5lbnRpdGllc1xyXG5cclxuXHRcdGlmICggZW50aXRpZXMgIT0gbnVsbCApIHtcclxuXHJcblx0XHRcdGMgPSBlbnRpdGllcy5sZW5ndGgtMVxyXG5cclxuXHRcdFx0d2hpbGUgKCBjID49IDAgKSB7XHJcblxyXG5cdFx0XHRcdGlmIChlbnRpdGllc1sgYyBdLmlkID09IGRhdGEuZW50aXR5SWQpIHtcclxuXHJcblx0XHRcdFx0XHRlbnRpdGllc1sgYyBdID0gZGF0YS5lbnRpdHlcclxuXHRcdFx0XHRcdGMgPSAtMVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGMtLVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwiY2xlYXJcIiApIHtcclxuXHJcblx0XHR2b3hlbHMgPSBbXVxyXG5cclxuXHR9IGVsc2UgaWYgKCBtZXNzYWdlLmNvbW1hbmQgPT0gXCJzdGFydFwiICkge1xyXG5cclxuXHRcdHNlbGYudXBkYXRlKClcclxuXHJcblx0fSBlbHNlIGlmICggbWVzc2FnZS5jb21tYW5kID09IFwic3RvcFwiICkge1xyXG5cclxuXHRcdHNlbGYuc3RvcCgpXHJcblxyXG5cdH0gZWxzZSBpZiAoIG1lc3NhZ2UuY29tbWFuZCA9PSBcImxvZ1wiICkge1xyXG5cclxuXHRcdGlmIChkYXRhID09IFwiXCIpIHtcclxuXHRcdFx0c2VsZi5wb3N0TWVzc2FnZSgne1wiY29tbWFuZFwiOlwibG9nXCIsXCJkYXRhXCI6WycgKyB1c2VyLnBvc2l0aW9uWzBdICsgJywnICsgdXNlci5wb3NpdGlvblsxXSArICcsJyArIHVzZXIucG9zaXRpb25bMl0gKyAnXX0nKTtcclxuXHRcdFx0c2VsZi5wb3N0TWVzc2FnZSgne1wiY29tbWFuZFwiOlwibG9nXCIsXCJkYXRhXCI6JyArIEpTT04uc3RyaW5naWZ5KHZveGVscykrICd9Jyk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxufTtcclxuXHJcbnNlbGYuc3RvcCA9ICgpID0+IHtcclxuXHJcblx0Y2xlYXJUaW1lb3V0KCBzZWxmLnVwZGF0ZUxvb3AgKVxyXG5cclxufVxyXG4iXX0=
