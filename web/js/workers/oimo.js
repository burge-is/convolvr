(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var world = null,
    minfo = null,
    fps = 0,
    f = [0, 0, 0],
    body = [];

self.onmessage = function (e) {

    if (e.data.oimoUrl && !world) {
        // Load oimo.js
        importScripts(e.data.oimoUrl);

        // Init physics
        world = new OIMO.World({ timestep: e.data.dt, iterations: 8, broadphase: 2, worldscale: 22000, random: true, info: false });

        // Ground plane // make configurable
        var ground = world.add({ size: [200, 20, 200], pos: [0, -10, 0] }),
            N = e.data.N;

        minfo = new Float32Array(N * 8);

        // re-write this block            
        //body[i] = world.add({type:'sphere', size:[0.25], pos:[x,(0.5*i)+0.5,z], move:true})
        //body[i] = world.add({type:'box', size:[0.5,0.5,0.5], pos:[x,((0.5*i)+0.5),z], move:true})

        setInterval(update, e.data.dt * 1000);
    }
};

var update = function () {

    // Step the world
    world.step();

    var length = body.length,
        id = 0,
        n = 0,
        i = 0,
        b = null;

    while (id < body.length) {

        b = body[id];
        n = 8 * id;

        if (b.sleeeping) {

            minfo[n + 7] = 1;
        } else {

            minfo[n + 7] = 0;
            b.getPosition().toArray(minfo, n);
            b.getQuaternion().toArray(minfo, n + 3);
        }

        id += 1;
    }

    f[1] = Date.now();
    if (f[1] - 1000 > f[0]) {
        f[0] = f[1];fps = f[2];f[2] = 0;
    }f[2]++;

    self.postMessage({ perf: fps, minfo: minfo });
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL1VzZXJzL29wZW5zL0FwcERhdGEvUm9hbWluZy9ucG0vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIkM6L0NvZGUvc3JjL2dpdGh1Yi5jb20vY29udm9sdnIvY29udm9sdnIvY2xpZW50L3NyYy9qcy93b3JrZXJzL29pbW8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksS0FBSyxHQUFHLElBQUk7SUFDWixLQUFLLEdBQUcsSUFBSTtJQUNaLEdBQUcsR0FBRyxDQUFDO0lBQ1AsQ0FBQyxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUU7SUFDZixJQUFJLEdBQUcsRUFBRSxDQUFBOztBQUViLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBQSxDQUFDLEVBQUk7O0FBRWxCLFFBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUc7O0FBRTVCLHFCQUFhLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FBQTs7O0FBRy9CLGFBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUUsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFDLENBQUMsRUFBRSxVQUFVLEVBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsS0FBSyxFQUFFLENBQUUsQ0FBQTs7O0FBR3ZILFlBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1lBQ3hELENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTs7QUFFWixhQUFLLEdBQUcsSUFBSSxZQUFZLENBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDOzs7Ozs7QUFNbEMsbUJBQVcsQ0FBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFFLENBQUM7S0FDekM7Q0FFSixDQUFBOztBQUVMLElBQUksTUFBTSxHQUFHLFlBQU07OztBQUdmLFNBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTs7QUFFWixRQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTtRQUNwQixFQUFFLEdBQUcsQ0FBQztRQUNOLENBQUMsR0FBRyxDQUFDO1FBQ0wsQ0FBQyxHQUFHLENBQUM7UUFDTCxDQUFDLEdBQUcsSUFBSSxDQUFBOztBQUViLFdBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUc7O0FBRXRCLFNBQUMsR0FBRyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUE7QUFDZCxTQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTs7QUFFVixZQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUc7O0FBRWYsaUJBQUssQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFDO1NBRXRCLE1BQU07O0FBRUgsaUJBQUssQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLGFBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUUsS0FBSyxFQUFFLENBQUMsQ0FBRSxDQUFDO0FBQ3BDLGFBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxPQUFPLENBQUUsS0FBSyxFQUFFLENBQUMsR0FBQyxDQUFDLENBQUUsQ0FBQztTQUUzQzs7QUFFRCxVQUFFLElBQUksQ0FBQyxDQUFBO0tBRVY7O0FBRUQsS0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNsQixRQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO0FBQUUsU0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0tBQUUsQUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7QUFFM0QsUUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7Q0FFOUMsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJsZXQgd29ybGQgPSBudWxsLFxyXG4gICAgbWluZm8gPSBudWxsLFxyXG4gICAgZnBzID0gMCxcclxuICAgIGYgPSBbIDAsIDAsIDAgXSxcclxuICAgIGJvZHkgPSBbXVxyXG5cclxuc2VsZi5vbm1lc3NhZ2UgPSBlID0+IHtcclxuXHJcbiAgICBpZiAoIGUuZGF0YS5vaW1vVXJsICYmICF3b3JsZCApIHtcclxuICAgICAgICAgICAgLy8gTG9hZCBvaW1vLmpzXHJcbiAgICAgICAgaW1wb3J0U2NyaXB0cyggZS5kYXRhLm9pbW9VcmwgKVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdCBwaHlzaWNzXHJcbiAgICAgICAgd29ybGQgPSBuZXcgT0lNTy5Xb3JsZCggeyB0aW1lc3RlcDplLmRhdGEuZHQsIGl0ZXJhdGlvbnM6OCwgYnJvYWRwaGFzZToyLCB3b3JsZHNjYWxlOjIyMDAwLCByYW5kb206dHJ1ZSwgaW5mbzpmYWxzZSB9IClcclxuXHJcbiAgICAgICAgICAgIC8vIEdyb3VuZCBwbGFuZSAvLyBtYWtlIGNvbmZpZ3VyYWJsZVxyXG4gICAgICAgIGxldCBncm91bmQgPSB3b3JsZC5hZGQoe3NpemU6WzIwMCwgMjAsIDIwMF0sIHBvczpbMCwtMTAsMF19KSxcclxuICAgICAgICAgICAgTiA9IGUuZGF0YS5OXHJcblxyXG4gICAgICAgICAgICBtaW5mbyA9IG5ldyBGbG9hdDMyQXJyYXkoIE4gKiA4ICk7XHJcblxyXG4gICAgICAgICAgICAvLyByZS13cml0ZSB0aGlzIGJsb2NrICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2JvZHlbaV0gPSB3b3JsZC5hZGQoe3R5cGU6J3NwaGVyZScsIHNpemU6WzAuMjVdLCBwb3M6W3gsKDAuNSppKSswLjUsel0sIG1vdmU6dHJ1ZX0pXHJcbiAgICAgICAgICAgIC8vYm9keVtpXSA9IHdvcmxkLmFkZCh7dHlwZTonYm94Jywgc2l6ZTpbMC41LDAuNSwwLjVdLCBwb3M6W3gsKCgwLjUqaSkrMC41KSx6XSwgbW92ZTp0cnVlfSlcclxuXHJcbiAgICAgICAgICAgIHNldEludGVydmFsKCB1cGRhdGUsIGUuZGF0YS5kdCoxMDAwICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbmxldCB1cGRhdGUgPSAoKSA9PiB7XHJcblxyXG4gICAgLy8gU3RlcCB0aGUgd29ybGRcclxuICAgIHdvcmxkLnN0ZXAoKVxyXG5cclxuICAgIGxldCBsZW5ndGggPSBib2R5Lmxlbmd0aCxcclxuICAgICAgICBpZCA9IDAsXHJcbiAgICAgICAgbiA9IDAsXHJcbiAgICAgICAgaSA9IDAsXHJcbiAgICAgICAgYiA9IG51bGxcclxuICAgICAgICAgICAgXHJcbiAgIHdoaWxlICggaWQgPCBib2R5Lmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgYiA9IGJvZHlbIGlkIF1cclxuICAgICAgICBuID0gOCAqIGlkXHJcblxyXG4gICAgICAgIGlmICggYi5zbGVlZXBpbmcgKSB7XHJcblxyXG4gICAgICAgICAgICBtaW5mb1sgbiArIDcgXSA9IDE7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBtaW5mb1sgbiArIDcgXSA9IDA7XHJcbiAgICAgICAgICAgIGIuZ2V0UG9zaXRpb24oKS50b0FycmF5KCBtaW5mbywgbiApO1xyXG4gICAgICAgICAgICBiLmdldFF1YXRlcm5pb24oKS50b0FycmF5KCBtaW5mbywgbiszICk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWQgKz0gMVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBmWzFdID0gRGF0ZS5ub3coKTtcclxuICAgIGlmIChmWzFdLTEwMDA+ZlswXSl7IGZbMF09ZlsxXTsgZnBzPWZbMl07IGZbMl09MDsgfSBmWzJdKys7XHJcblxyXG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7IHBlcmY6ZnBzLCBtaW5mbzptaW5mbyB9KVxyXG5cclxufVxyXG5cclxuIl19
